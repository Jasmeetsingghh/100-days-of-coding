Q3.Check if the array is sorted and rotated?(Easy)
  class Solution {
    public boolean check(int[] nums) {
        int count=0;
        int n=nums.length;
        for(int i=1;i<n;i++){
            if(nums[i-1]>nums[i]){
                count ++;
            }
        }
        if(nums[n-1]>nums[0]){
            count ++;
        }
        return count<=1;
    }
}
  
Q4.Left Rotate an array by one place?(Easy)
  
  public class Solution {
    static int[] rotateArray(int[] arr, int n) {
        int temp=arr[0];
        for(int i=1;i<n;i++){
            arr[i-1]=arr[i];
        }
        arr[n-1]=temp;
        return arr;
    }
}
  
Q5.Left Rotate an array by k place?(Medium)
  
  class Solution {
    public void rotate(int[] nums, int k) {
        int temp[] = new int[nums.length];
        int n=nums.length;
        for(int i=0;i<n;i++){
            temp[(i+k)%n]=nums[i];
        }
        for(int i=0;i<n;i++){
            nums[i]=temp[i];
        }

    }
}
